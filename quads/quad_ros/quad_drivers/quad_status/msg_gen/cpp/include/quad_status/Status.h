/* Auto-generated by genmsg_cpp for file /home/quadbase/ros/quad_ros/quad_drivers/quad_status/msg/Status.msg */
#ifndef QUAD_STATUS_MESSAGE_STATUS_H
#define QUAD_STATUS_MESSAGE_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace quad_status
{
template <class ContainerAllocator>
struct Status_ {
  typedef Status_<ContainerAllocator> Type;

  Status_()
  : header()
  , Batt_Voltage(0.0)
  , RC_OK(false)
  , Motors_ON(false)
  , ExCtrl_ON(false)
  , Run_Time()
  {
  }

  Status_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , Batt_Voltage(0.0)
  , RC_OK(false)
  , Motors_ON(false)
  , ExCtrl_ON(false)
  , Run_Time()
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _Batt_Voltage_type;
  float Batt_Voltage;

  typedef uint8_t _RC_OK_type;
  uint8_t RC_OK;

  typedef uint8_t _Motors_ON_type;
  uint8_t Motors_ON;

  typedef uint8_t _ExCtrl_ON_type;
  uint8_t ExCtrl_ON;

  typedef ros::Duration _Run_Time_type;
  ros::Duration Run_Time;


  typedef boost::shared_ptr< ::quad_status::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_status::Status_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Status
typedef  ::quad_status::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::quad_status::Status> StatusPtr;
typedef boost::shared_ptr< ::quad_status::Status const> StatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::quad_status::Status_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::quad_status::Status_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace quad_status

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quad_status::Status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quad_status::Status_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quad_status::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3563f39c50382b772e10b44ffe9cb2ed";
  }

  static const char* value(const  ::quad_status::Status_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3563f39c50382b77ULL;
  static const uint64_t static_value2 = 0x2e10b44ffe9cb2edULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_status::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_status/Status";
  }

  static const char* value(const  ::quad_status::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quad_status::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 Batt_Voltage\n\
bool RC_OK\n\
bool Motors_ON\n\
bool ExCtrl_ON\n\
duration Run_Time\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::quad_status::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::quad_status::Status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::quad_status::Status_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quad_status::Status_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.Batt_Voltage);
    stream.next(m.RC_OK);
    stream.next(m.Motors_ON);
    stream.next(m.ExCtrl_ON);
    stream.next(m.Run_Time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Status_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_status::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::quad_status::Status_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Batt_Voltage: ";
    Printer<float>::stream(s, indent + "  ", v.Batt_Voltage);
    s << indent << "RC_OK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_OK);
    s << indent << "Motors_ON: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Motors_ON);
    s << indent << "ExCtrl_ON: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ExCtrl_ON);
    s << indent << "Run_Time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.Run_Time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUAD_STATUS_MESSAGE_STATUS_H

