/***

If you have some question about this program, please send me message.
keiya.okada(at mark)gmail.com

Copyright (C) 2011 Keiya Okada All Rights Reserved.

***/

/*

This program is a republisher to publish image from bumblebee camera and subscribe for teleop pc with some parameters.
Parameters are generated in "config.cfg" file. If you want to adjust parameters in dynamic_reconfigure gui, you have to make this kind of configure file.
" http://www.ros.org/wiki/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile " 

This program was created based on dynamic reconfigure node.
" http://www.ros.org/wiki/dynamic_reconfigure/Tutorials/SettingUpDynamicReconfigureForANode%28cpp%29 "

This program is already put on RAPOSA and started automatically by launch file.

*/

/***********/
/* Include */
/***********/

// include from depedend packages //

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <cv_bridge/cv_bridge.h>

#include <sensor_msgs/image_encodings.h> // is to encode image again when "grayscale" parameter is changed

// include to use dynamic_reconfigure parameter //

#include <dynamic_reconfigure/server.h>             // is necessary to use dynamic_reconfigure parameter
#include <raposang_video_repub/RepublisherConfig.h> // is the header file generated by dynamic_reconfigure from config.cfg

/**********/
/* Define */
/**********/

#define FPS	30           // default FPS
#define WIDTH	    1.0  // default image is not reduced so default image is original 
#define HEIGHT		1.0  // default image is not reduced so default image is original

/*************/
/* Namespace */
/*************/

namespace enc = sensor_msgs::image_encodings; // declares namespace to use image_encoding as "enc"
                                              // about image_encoding, please see this link; 
                                              // " http://www.ros.org/doc/api/sensor_msgs/html/namespacesensor__msgs_1_1image__encodings.html "

/****************/
/* Global value */
/****************/

image_transport::Publisher pub; // declares gloval publisher to send image for decompresser

int fps = FPS;                                     // is used as publishing frequency, so publisher works as (FPS)Hz.
bool grayscale = false;                            // default image color is not gray. if this value is true, image is changed grayscale.     
double width_ratio = WIDTH, height_ratio = HEIGHT; // declares default value of reduction ratio.

/*****************/
/* imageCallback */
/*****************/

/* 
This function called when subscriber receives image from bumblebee camera.
In this function, image is published for decompresser and also changed color, width and height when parameter is changed.
This function called every "1/FPS" sec.
*/

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{

	unsigned int new_w, new_h; // declares values to put new reduction ratio. 	
	
	bool is_resized = (width_ratio!=1.0 || height_ratio!=1.0); // if width_ratio or height_ratio is not 1.0, image will be reduced.
	
	ROS_INFO("Image received.");		

	if (grayscale || is_resized) { // if grayscale is called as true or width_ratio or height_ratio is changed, image will be also changed.
		
		cv_bridge::CvImagePtr cv_ptr; // is to convert between ROS sensor_msgs/Image messages and OpenCV images.
	
		std::string enc_type = (grayscale ? enc::MONO8 : enc::RGB8); // if grayscale == 1, encode type is MONO8 (grayscale). if not, encode type is RGB8 (color) 

		cv_ptr = cv_bridge::toCvCopy(msg, enc_type); // image information in OpenCV copies in ROS message "msg".
		                                             // "cv_ptr" is declared in L.81

		new_w = cv_ptr->image.cols*width_ratio;  // changes width
		new_h = cv_ptr->image.rows*height_ratio; //	changes height
		
		if (is_resized) { // width_ratio or height_ratio is changed, image infromation in OpenCV is changed

			cv::Mat dest(cv::Size(new_w, new_h), (grayscale ? CV_8UC1 : CV_8UC3)); // "cv::Size(new_w, new_h)" is parameter of constructor. 												                                   // if you want to know the detail of "cv::Mat", please read bellow link;
			
                   // " http://www.cs.iit.edu/~agam/cs512/lect-notes/opencv-intro/opencv-intro.html#SECTION00060000000000000000 "
                   
                   
			cv::resize(cv_ptr->image, dest, dest.size(), 0, 0, cv::INTER_LINEAR); // changes the size of image. resized image is put on "dest"

                   // " http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-resize "

			cv_ptr->image = dest; // resized image put on message
			
		}
		
		pub.publish(cv_ptr->toImageMsg()); // publishes resized image for decompresser 
		
	} else
		
		pub.publish(msg); // publishes image for decompresser, imega is not resized
}

/************/
/* callback */
/************/

/* 
This is the callback that will get called when the dynamic_reconfigure server is sent a new configuration.
Current values of parameters are called from dynamic_reconfigure server which is created by config file.
If you want to know the detail, please see this tutorial;
" http://www.ros.org/wiki/dynamic_reconfigure/Tutorials/SettingUpDynamicReconfigureForANode%28cpp%29 "
*/

void callback(raposang_video_repub::RepublisherConfig &config, uint32_t level) {

   fps = config.fps;                   // calls current value of fps (1 <= fps <= 30)
   grayscale = config.grayscale;       // calls current value of grayscale (true or false)
   width_ratio = config.width_ratio;   // calls current value of width_ratio (0.1 <= width_ratio <= 30)
   height_ratio = config.height_ratio; // calls current value of height_ratio (0.1 <= height_ratio <= 30)
   
}

/********/
/* main */
/********/

int main(int argc, char **argv)
{
  ros::init(argc, argv, "raposang_video_repub"); // declares name of node
  
  // if you want to know the detail, please read bellow link;
  // " http://www.ros.org/wiki/dynamic_reconfigure/Tutorials/SettingUpDynamicReconfigureForANode%28cpp%29#The_Breakdown "
  
  dynamic_reconfigure::Server<raposang_video_repub::RepublisherConfig> server;          // defines the dynamic_reconfigure server with "RepublisherConfig" 
  dynamic_reconfigure::Server<raposang_video_repub::RepublisherConfig>::CallbackType f; // define a variable to represent callback 
  
  f = boost::bind(&callback, _1, _2); // calls callback
  server.setCallback(f);              // sends callback to the serve
    
  ros::NodeHandle n;       // nodehandle for this program
  ros::NodeHandle np("~"); // declares parameter nodehandle

  image_transport::ImageTransport it(n);  // creates image_transport instance in nodehandle
  pub = it.advertise("output", 1);        // tells the master that we are going to be publishing with "image_transport" package
  image_transport::Subscriber sub = it.subscribe("input", 1, imageCallback); // subscribes image from bumblebee camera
  
  ROS_INFO("No prob until here");

  while(ros::ok()) {
		ros::Rate r(fps);  	
		ros::spinOnce();  
		r.sleep();        // publisher and subscriber work every (1/FPS) sec
  }
}
